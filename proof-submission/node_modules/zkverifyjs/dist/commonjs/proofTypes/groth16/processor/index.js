"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../../../utils/helpers");
const enums_1 = require("../../../enums");
const snarkjsFormatter = __importStar(require("../formatter/snarkjs"));
const gnarkFormatter = __importStar(require("../formatter/gnark"));
const formatterMap = {
    [enums_1.Library.snarkjs]: snarkjsFormatter,
    [enums_1.Library.gnark]: gnarkFormatter,
};
class Groth16Processor {
    /**
     * Dynamically selects the appropriate formatter module based on the provided library option.
     *
     * @param {ProofOptions} options - The proof options containing the library type.
     * @throws {Error} If the library is unsupported or the module cannot be loaded.
     * @returns {Object} The formatter module corresponding to the specified library.
     */
    getFormatter(options) {
        if (!(0, helpers_1.isGroth16Config)(options)) {
            throw new Error(`Unsupported proof configuration for proofType: ${options.proofType}`);
        }
        const formatter = formatterMap[options.config.library];
        if (!formatter) {
            throw new Error(`Unsupported Groth16 formatter library: ${options.config.library}`);
        }
        return formatter;
    }
    /**
     * Formats the zk-SNARK proof using the appropriate formatter for the specified library.
     *
     * @param {ProofInput} proof - The raw proof input data.
     * @param {ProofOptions} options - The proof options containing the library and other details.
     * @returns {Proof} The formatted proof data.
     */
    formatProof(proof, options) {
        const formatter = this.getFormatter(options);
        return formatter.formatProof(proof, options);
    }
    /**
     * Formats the verification key using the appropriate formatter for the specified library.
     *
     * @param {Groth16VerificationKeyInput} vk - The raw verification key input data.
     * @param {ProofOptions} options - The proof options containing the library and other details.
     * @returns {Groth16VerificationKey} The formatted verification key.
     */
    formatVk(vk, options) {
        const formatter = this.getFormatter(options);
        return formatter.formatVk(vk, options);
    }
    /**
     * Formats the public inputs using the appropriate formatter for the specified library.
     *
     * @param {string[]} pubs - The array of public input strings.
     * @param {ProofOptions} options - The proof options containing the library and other details.
     * @returns {string[]} The formatted public inputs.
     */
    formatPubs(pubs, options) {
        const formatter = this.getFormatter(options);
        return formatter.formatPubs(pubs);
    }
}
exports.default = new Groth16Processor();
