"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = void 0;
const transactions_1 = require("../../utils/transactions");
const enums_1 = require("../../enums");
const format_1 = require("../format");
const extrinsic_1 = require("../extrinsic");
const helpers_1 = require("../../utils/helpers");
const verify = async (connection, options, emitter, input) => {
    const { api } = connection;
    try {
        const selectedAccount = (0, helpers_1.getKeyringAccountIfAvailable)(connection, options.accountAddress);
        if (input.domainId != null) {
            options.domainId = input.domainId;
        }
        const transaction = (() => {
            if ('proofData' in input && input.proofData) {
                const { proof, publicSignals, vk } = input.proofData;
                const formatted = (0, format_1.format)(options.proofOptions, proof, publicSignals, vk, options.registeredVk);
                return (0, extrinsic_1.createSubmitProofExtrinsic)(api, options.proofOptions.proofType, formatted, input.domainId);
            }
            if ('extrinsic' in input && input.extrinsic) {
                return input.extrinsic;
            }
            throw new Error('Invalid input: Either proofData or extrinsic must be provided.');
        })();
        const result = selectedAccount
            ? await (0, transactions_1.handleTransaction)(api, transaction, selectedAccount, undefined, emitter, options, enums_1.TransactionType.Verify)
            : 'injector' in connection
                ? await (0, transactions_1.handleTransaction)(api, transaction, connection.accountAddress, connection.injector.signer, emitter, options, enums_1.TransactionType.Verify)
                : (() => {
                    throw new Error('Unsupported connection type.');
                })();
        return result;
    }
    catch (error) {
        emitter.emit(enums_1.ZkVerifyEvents.ErrorEvent, error);
        emitter.removeAllListeners();
        throw error;
    }
};
exports.verify = verify;
