"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.startSession = startSession;
exports.startWalletSession = startWalletSession;
const connection_1 = require("../connection");
const account_1 = require("../account");
async function startSession(options) {
    if (typeof window !== 'undefined') {
        throw new Error('startSession should not be called in a browser environment, use "startWalletSession"');
    }
    const { networkConfig, seedPhrases } = options;
    const { api, provider } = await (0, connection_1.establishConnection)(networkConfig);
    if (seedPhrases && seedPhrases.length > 0) {
        const uniqueAccounts = new Map();
        for (const phrase of seedPhrases) {
            const account = (0, account_1.setupAccount)(phrase);
            if (uniqueAccounts.has(account.address)) {
                console.warn(`Skipping adding account ${account.address} to session as it is already active.`);
                continue;
            }
            uniqueAccounts.set(account.address, account);
        }
        return { api, provider, accounts: uniqueAccounts };
    }
    else {
        return { api, provider };
    }
}
async function startWalletSession(options) {
    if (typeof window === 'undefined') {
        throw new Error('This function must be called in a browser environment, for server side / backend use "startSession"');
    }
    const { networkConfig, wallet } = options;
    const { api, provider } = await (0, connection_1.establishConnection)(networkConfig);
    if (!wallet || !wallet.source || !wallet.accountAddress) {
        throw new Error('Wallet source and accountAddress must be provided.');
    }
    const { web3Enable, web3Accounts, web3FromSource } = await Promise.resolve().then(() => __importStar(require('@polkadot/extension-dapp')));
    const extensions = await web3Enable('zkVerify');
    if (extensions.length === 0) {
        throw new Error('No extension installed or access was denied.');
    }
    const accounts = await web3Accounts();
    if (accounts.length === 0) {
        throw new Error('No accounts found.');
    }
    const selectedAccount = accounts.find((account) => account.meta.source === wallet.source &&
        account.address === wallet.accountAddress);
    if (!selectedAccount) {
        throw new Error(`No account found for wallet source: ${wallet.source} and address: ${wallet.accountAddress}`);
    }
    const injector = await web3FromSource(selectedAccount.meta.source);
    return {
        api,
        provider,
        injector,
        accountAddress: selectedAccount.address,
    };
}
