import { AccountConnection, WalletConnection } from '../connection/types';
import { TransactionType } from '../../enums';
import EventEmitter from 'events';
import { AggregateTransactionInfo, DomainOptions, DomainTransactionInfo, RegisterDomainTransactionInfo } from '../../types';
import { SubmittableExtrinsic } from '@polkadot/api/types';
export declare const registerDomain: (connection: AccountConnection | WalletConnection, aggregationSize: number, queueSize: number | undefined, domainOptions: DomainOptions, signerAccount?: string) => {
    events: EventEmitter;
    transactionResult: Promise<RegisterDomainTransactionInfo>;
};
export declare const holdDomain: (connection: AccountConnection | WalletConnection, domainId: number, signerAccount?: string) => {
    events: EventEmitter;
    transactionResult: Promise<DomainTransactionInfo>;
};
export declare const unregisterDomain: (connection: AccountConnection | WalletConnection, domainId: number, signerAccount?: string) => {
    events: EventEmitter;
    transactionResult: Promise<DomainTransactionInfo>;
};
export declare const aggregate: (connection: AccountConnection | WalletConnection, domainId: number, aggregationId: number, signerAccount?: string) => {
    events: EventEmitter;
    transactionResult: Promise<AggregateTransactionInfo>;
};
export declare const performTransaction: <T>(connection: AccountConnection | WalletConnection, extrinsic: SubmittableExtrinsic<"promise">, transactionType: TransactionType, emitter: EventEmitter, signerAccount?: string) => Promise<T>;
//# sourceMappingURL=index.d.ts.map