import { WalletOptions, zkVerifySessionOptions } from '../../types';
import { zkVerifySession } from '../../index';
import { SupportedNetwork } from '../../../config';
import { CustomNetworkConfig, NetworkConfig } from '../../../types';
export type SupportedNetworkMap = {
    [K in Exclude<SupportedNetwork, SupportedNetwork.Custom>]: () => NetworkBuilder;
} & {
    [SupportedNetwork.Custom]: (config: CustomNetworkConfig) => NetworkBuilder;
};
export declare class NetworkBuilder {
    private readonly startSession;
    private options;
    constructor(startSession: (options: zkVerifySessionOptions) => Promise<zkVerifySession>, config: NetworkConfig);
    /**
     * Sets a single seed phrase for a non-browser based session.
     * @param {string} seedPhrase - The seed phrase to use.
     * @returns {Promise<zkVerifySession>} A promise resolving to the session instance.
     */
    withAccount(seedPhrase: string): Promise<zkVerifySession>;
    /**
     * Sets multiple seed phrases for a non-browser based session.
     * @param {string[]} seedPhrases - An array of seed phrases.
     * @returns {Promise<zkVerifySession>} A promise resolving to the session instance.
     * @throws Will throw an error if fewer than two seed phrases are provided.
     */
    withAccounts(seedPhrases: string[]): Promise<zkVerifySession>;
    /**
     * Sets a wallet connection for a browser based session.
     * @param {WalletOptions} wallet - The wallet options to use.
     * @returns {Promise<zkVerifySession>} A promise resolving to the session instance.
     */
    withWallet(wallet: WalletOptions): Promise<zkVerifySession>;
    /**
     * Initializes the session in read-only mode.
     * @returns {Promise<zkVerifySession>} A promise resolving to the session instance.
     */
    readOnly(): Promise<zkVerifySession>;
}
//# sourceMappingURL=index.d.ts.map