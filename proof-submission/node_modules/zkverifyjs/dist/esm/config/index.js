import { FflonkProcessor, Groth16Processor, Plonky2Processor, ProofOfSqlProcessor, Risc0Processor, UltraPlonkProcessor } from "../proofTypes/index.js";
export const CHAIN_SS58_PREFIX = 251; // zkVerify specific address format
export var SupportedNetwork;
(function (SupportedNetwork) {
  SupportedNetwork["Volta"] = "Volta";
  SupportedNetwork["Custom"] = "Custom";
  // ADD_NEW_SUPPORTED_NETWORK
})(SupportedNetwork || (SupportedNetwork = {}));
export const SupportedNetworkConfig = {
  [SupportedNetwork.Volta]: {
    host: SupportedNetwork.Volta,
    websocket: 'wss://volta-rpc.zkverify.io',
    rpc: 'https://volta-rpc.zkverify.io'
  },
  // ADD_NEW_SUPPORTED_NETWORK
  [SupportedNetwork.Custom]: {
    host: SupportedNetwork.Custom,
    websocket: '',
    rpc: ''
  }
};
export var ProofType;
(function (ProofType) {
  ProofType["fflonk"] = "fflonk";
  ProofType["groth16"] = "groth16";
  ProofType["risc0"] = "risc0";
  ProofType["ultraplonk"] = "ultraplonk";
  ProofType["proofofsql"] = "proofofsql";
  ProofType["plonky2"] = "plonky2";
  // ADD_NEW_PROOF_TYPE
})(ProofType || (ProofType = {}));
export const proofConfigurations = {
  [ProofType.fflonk]: {
    pallet: 'settlementFFlonkPallet',
    processor: FflonkProcessor
  },
  [ProofType.groth16]: {
    pallet: 'settlementGroth16Pallet',
    processor: Groth16Processor
  },
  [ProofType.risc0]: {
    pallet: 'settlementRisc0Pallet',
    processor: Risc0Processor
  },
  [ProofType.ultraplonk]: {
    pallet: 'settlementUltraplonkPallet',
    processor: UltraPlonkProcessor
  },
  [ProofType.proofofsql]: {
    pallet: 'settlementProofOfSqlPallet',
    processor: ProofOfSqlProcessor
  },
  [ProofType.plonky2]: {
    pallet: 'settlementPlonky2Pallet',
    processor: Plonky2Processor
  }
  // ADD_NEW_PROOF_TYPE - configurations
};
// ADD_NEW_PROOF_TYPE - options if needed.
export const zkvTypes = {
  MerkleProof: {
    root: 'H256',
    proof: 'Vec<H256>',
    number_of_leaves: 'u32',
    leaf_index: 'u32',
    leaf: 'H256'
  },
  Curve: {
    _enum: ['Bn254', 'Bls12_381']
  },
  Groth16Vk: {
    curve: 'Curve',
    alphaG1: 'Bytes',
    betaG2: 'Bytes',
    gammaG2: 'Bytes',
    deltaG2: 'Bytes',
    gammaAbcG1: 'Vec<Bytes>'
  },
  Plonky2Config: {
    _enum: ['Keccak', 'Poseidon']
  },
  Plonky2Vk: {
    config: 'Plonky2Config',
    bytes: 'Bytes'
  }
};
export const zkvRpc = {
  aggregate: {
    statementPath: {
      description: 'Get the Merkle root and path of a aggregate statement',
      params: [{
        name: 'at',
        type: 'BlockHash'
      }, {
        name: 'domain_id',
        type: 'u32'
      }, {
        name: 'aggregation_id',
        type: 'u64'
      }, {
        name: 'statement',
        type: 'H256'
      }],
      type: 'MerkleProof'
    }
  },
  vk_hash: {
    groth16: {
      description: 'Get the hash of a Groth16 verification key',
      params: [{
        name: 'vk',
        type: 'Groth16Vk'
      }],
      type: 'H256'
    },
    plonky2: {
      description: 'Get the hash of a Plonky2 verification key',
      params: [{
        name: 'vk',
        type: 'Plonky2Vk'
      }],
      type: 'H256'
    },
    proofofsql: {
      description: 'Get the hash of a Proof-of-SQL verification key',
      params: [{
        name: 'vk',
        type: 'Bytes'
      }],
      type: 'H256'
    },
    risc0: {
      description: 'Get the hash of a Risc0 verification key',
      params: [{
        name: 'vk',
        type: 'H256'
      }],
      type: 'H256'
    },
    ultraplonk: {
      description: 'Get the hash of an UltraPLONK verification key',
      params: [{
        name: 'vk',
        type: 'Bytes'
      }],
      type: 'H256'
    },
    fflonk: {
      description: 'Get the hash of a FFLONK verification key',
      params: [{
        name: 'vk',
        type: 'Bytes'
      }],
      type: 'H256'
    }
  }
};